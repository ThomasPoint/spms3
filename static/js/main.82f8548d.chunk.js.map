{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","eachPortfolios","portfolio","index","react_default","a","createElement","App_Portfolio","name","key","remove","removePortfolio","addPortfolio","state","curNumberPortfolio","createdPortfolio","document","getElementById","value","alert","listPortfolio","portfolios","push","nbPortfolioTmp","setState","splice","nbPortfolio","localStorage","removeItem","setItem","JSON","stringify","parse","getItem","window","addEventListener","saveAppState","bind","removeEventListener","_this2","className","style","width","id","type","aria-label","aria-describedby","onClick","map","Component","Portfolio","_this3","deleteStock","curStocks","listStock","tmpTotValue","totalValue","console","log","curNbStock","nbStock","savePortfolioState","eachStock","stock","App_Stock","symbol","shares","unitPrice","totalPrice","showInDollar","disabled","currency","fetch","then","res","json","data","exchangeRate","stocks","totVal","forEach","catch","err","showInEuro","isAddingStock","idPortfolio","_this4","find","s","refs","newStockSymbole","newStockNbShares","sharesNumber","totValue","result","d","dt","unit_price","_this5","ref","addStockToPortfolio","cancelAddingStock","_this6","scope","Number","toFixed","showStockForm","renderStockForm","renderPortfolio","Stock","_this7","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82f8548d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        let portfoliosHistory = [];\n        let nbPortfolio = 0;\n\n        this.state = {\n            portfolios: portfoliosHistory,\n            curNumberPortfolio: nbPortfolio,\n        };\n    }\n\n    // --------- function used to manage local storage\n    saveAppState() {\n        localStorage.setItem(\"appState\", JSON.stringify(this.state))\n    }\n\n    componentDidMount()  {\n        this.setState(JSON.parse(localStorage.getItem(\"appState\")));\n\n        // adding an event listener that will help us save the state of the app when the\n        // user wants to leave or refresh the application\n        window.addEventListener(\"beforeunload\", this.saveAppState.bind(this));\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"beforeunload\", this.saveAppState.bind(this));\n        // save the state of the app just before the app component will disapear\n        this.saveAppState();\n    }\n    // ------------- end function to manage local storage\n    eachPortfolios = (portfolio, index) => {\n        return (<Portfolio name={portfolio}\n                           key={index}\n                           index={index}\n                           remove={(index) =>  this.removePortfolio(index)}/>)\n            ;\n    };\n\n    addPortfolio = () => {\n        if ( this.state.curNumberPortfolio <10) {\n            let createdPortfolio = document.getElementById(\"portfolio_name\").value;\n            if(createdPortfolio === \"\") {\n                alert(\"Please give a name!\")\n            } else {\n                let listPortfolio = this.state.portfolios;\n                listPortfolio.push(createdPortfolio);\n                let nbPortfolioTmp = this.state.curNumberPortfolio + 1;\n\n                this.setState({\n                    portfolios : listPortfolio,\n                    curNumberPortfolio:nbPortfolioTmp\n                });\n            }\n\n\n        } else {\n            alert(\"The maximun number of portfolios is 10 !\")\n        }\n    };\n\n    removePortfolio = (index) => {\n        let listPortfolio = this.state.portfolios;\n        listPortfolio.splice(index,1);\n        let nbPortfolio = this.state.curNumberPortfolio -1;\n\n        // we remove the portfolio from the local storage\n        localStorage.removeItem(\"portfolioState\"+index);\n        this.setState({\n            portfolios: listPortfolio,\n            curNumberPortfolio: nbPortfolio\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"\">\n                <div className=\"col-4 col-centered\">\n                    <div className=\"input-group input-group-sm mb-3 mt-3 ml-3\" style={{width: '30rem' }}>\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">Portfolio Name</span>\n                        </div>\n                        <input id=\"portfolio_name\" type=\"text\" className=\"form-control rounded\" aria-label=\"Sizing example input\"\n                               aria-describedby=\"inputGroup-sizing-sm\"/>\n                        <button onClick={() => this.addPortfolio()} className=\"btn btn-primary btn-sm ml-4 mr-4\">Add Portfolio</button>\n                    </div>\n\n                    <div>\n                        {\n                            this.state.portfolios.map(this.eachPortfolios)\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Portfolio extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            listStock: [],\n            nbStock:0,\n            isAddingStock: false,\n            totalValue:0,\n            currency: \"$\"\n        }\n    }\n\n    // --------- function used to manage local storage\n    savePortfolioState() {\n        let idPortfolio = \"portfolioState\" + this.props.index;\n        localStorage.setItem(idPortfolio, JSON.stringify(this.state))\n    }\n    //\n    componentDidMount()  {\n        let idPortfolio = \"portfolioState\" + this.props.index;\n        this.setState(JSON.parse(localStorage.getItem(idPortfolio)));\n\n        if (this.state.currency ===\"$\") {\n            if(document.getElementById(\"dollar\"+this.props.index) !== null) {\n                document.getElementById(\"dollar\" + this.props.index).disabled = true;\n            }\n        } else if (this.state.currency ===\"€\") {\n            if(document.getElementById(\"euros\"+this.props.index)) {\n                document.getElementById(\"euros\"+this.props.index).disabled = true;\n            }\n\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.currency ===\"$\") {\n            if(document.getElementById(\"dollar\"+this.props.index) !== null) {\n                document.getElementById(\"dollar\"+this.props.index).disabled = true;\n            }\n        } else if (this.state.currency ===\"€\") {\n            if (document.getElementById(\"euros\"+this.props.index) !== null) {\n                document.getElementById (\"euros\"+this.props.index).disabled = true;\n            }\n        }\n    }\n\n    // ------------- end function to manage local storage\n\n\n    showStockForm() {\n        this.setState({isAddingStock: true});\n    }\n    // this method help us to add a stock to a portfolio\n    addStockToPortfolio() {\n        if (this.state.nbStock < 50 ||\n            typeof (this.state.listStock.find(s => s.symbol === this.refs.symbol.value) !== 'undefined')) {\n\n            let newStockSymbole = this.refs.symbol.value;\n            let newStockNbShares = this.refs.sharesNumber.value;\n\n            let curNbStock = this.state.nbStock;\n            let curStocks = this.state.listStock;\n            let totValue = this.state.totalValue;\n\n            //First api call to get all the existing symbols\n            fetch('https://api.iextrading.com/1.0/ref-data/symbols')\n                .then(result => {\n                    return result.json();\n                }).then(data => {\n                // We check that the requested symbol exist in the list\n                if (typeof(data.find(d => d[\"symbol\"] ===  newStockSymbole) !== 'undefined')) {\n                    // API call to get the unit price of the stock\n                    fetch('https://api.iextrading.com/1.0/tops/last?symbols=' + newStockSymbole)\n                        .then(res => {\n                            return res.json();\n                        }).then(dt => {\n                        let unit_price = dt[0][\"price\"];\n                        // This if statement check if the new symbol already exists in the portfolio\n                        // if no, we increment by one the number of stock\n                        // otherwise we let it unchanged\n                        if (typeof (curStocks.find(s => s.symbol === newStockSymbole)) === 'undefined') {\n                            curNbStock++;\n                        }\n                        // we get the unit price in $ from the API, if the currency is in euro we need to\n                        // convert it : to do so we alter the unit price\n                        if(this.state.currency === \"€\") {\n                            fetch('https://api.exchangeratesapi.io/latest?symbols=USD')\n                                .then(res => {\n                                    return res.json();\n                                }).then(data => {\n                                let exchangeRate = data[\"rates\"][\"USD\"];\n                                unit_price /= exchangeRate;\n\n                                // we add the new stock to the list\n                                curStocks.push({symbol: newStockSymbole,\n                                    shares: newStockNbShares,\n                                    unitPrice: unit_price,\n                                    totalPrice: unit_price*newStockNbShares});\n                                totValue += unit_price*newStockNbShares;\n                                // save state once the adding is performed\n                                this.setState({isAddingStock:false, listStock : curStocks, nbStock:curNbStock, totalValue:totValue},\n                                    () => {\n                                        this.savePortfolioState();\n                                    });\n\n                            })\n                        } else if(this.state.currency ===\"$\") {\n                            // we add the new stock to the list\n                            curStocks.push({symbol: newStockSymbole,\n                                shares: newStockNbShares,\n                                unitPrice: unit_price,\n                                totalPrice: unit_price*newStockNbShares});\n                            totValue += unit_price*newStockNbShares;\n                            // save state once the adding is performed\n                            this.setState({isAddingStock:false, listStock : curStocks, nbStock:curNbStock, totalValue:totValue},\n                                () => {\n                                    this.savePortfolioState();\n                                });\n                        }\n\n\n                    })\n                        .catch(err => alert(\"The symbol you want to add does not exist in the database\"));\n                }\n            })\n\n\n        } else {\n            alert(\"Your portfolio already contains the maximum number of stock (50)\");\n        }\n\n    }\n\n    deleteStock = (index) => {\n        let curStocks = this.state.listStock;\n\n        // we substract the price of the removed stock\n        let tmpTotValue = this.state.totalValue;\n        tmpTotValue -= curStocks[index][\"totalPrice\"];\n        console.log(tmpTotValue);\n        curStocks.splice(index,1);\n\n        let curNbStock = this.state.nbStock;\n        curNbStock -= 1;\n        console.log(curNbStock);\n\n        // setState is asynchronous : https://www.freecodecamp.org/forum/t/update-localstorage-after-setstate-react/167754/4\n        // we use the callback function to save the state of the portfolios once the state has been updated\n        this.setState({listStock:curStocks, nbStock:curNbStock, totalValue:tmpTotValue},\n            () => {\n                this.savePortfolioState();\n            });\n\n    };\n\n    cancelAddingStock() {\n        this.setState({isAddingStock:false});\n    }\n\n\n    eachStock = (stock, index) => {\n        return( <Stock symbol={stock.symbol}\n                       shares={stock.shares}\n                       unitPrice={stock.unitPrice}\n                       totalPrice={stock.totalPrice}\n                       key={index}\n                       index={index}\n                       deleteStock = {(index) => this.deleteStock(index)}/>\n        )\n    };\n\n\n\n    renderStockForm () {\n        return (\n            <div >\n                <h2 className=\"ml-3\">Stock Form</h2>\n                <div className=\"input-group input-group-sm mb-3 mt-3 ml-3\" style={{width: '30rem' }}>\n                    <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">Symbol</span>\n                    </div>\n                    <input id={\"symbol\"} ref={\"symbol\"} type=\"text\" className=\"form-control\" aria-label=\"Sizing example input\"\n                           aria-describedby=\"inputGroup-sizing-sm\"/>\n                </div>\n                <div className=\"input-group input-group-sm mb-3 mt-3 ml-3\" style={{width: '30rem' }}>\n                    <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">Number of shares</span>\n                    </div>\n                    <input id={\"sharesNumber\"} ref={\"sharesNumber\"} type=\"number\" className=\"form-control\" aria-label=\"Sizing example input\"\n                           aria-describedby=\"inputGroup-sizing-sm\"/>\n                </div>\n                <button onClick={() => this.addStockToPortfolio()} className=\"btn btn-success btn-sm ml-3 mr-4\">Save</button>\n                <button onClick={() => this.cancelAddingStock()} className=\"btn btn-danger btn-sm\">Cancel</button>\n            </div>\n        )\n    }\n\n    renderPortfolio() {\n        return(\n            <div className=\"card mt-3\" style={{width: '30rem' }}>\n                <div className=\"card-body\">\n                    <h2 className=\"card-title\">{this.props.name}</h2>\n                    <div>\n                        <button id={\"euros\"+this.props.index} onClick={() => this.showInEuro()} className=\"btn btn-link btn-sm mr-4\">Show in €</button>\n                        <button id={\"dollar\"+this.props.index} onClick={() => this.showInDollar()} className=\"btn btn-link btn-sm mr-4\" >Show in $</button>\n                    </div>\n\n                    <div>\n                        <table className=\"table table-scroll\">\n                            <thead>\n                            <tr>\n                                <th scope=\"col\">Stock Name</th>\n                                <th scope=\"col\">Unit Val ({this.state.currency})</th>\n                                <th scope=\"col\">Qty</th>\n                                <th scope=\"col\">Tot Val ({this.state.currency})</th>\n                                <th></th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {this.state.listStock.map(this.eachStock)}\n                            </tbody>\n                        </table>\n                    </div>\n                    <p>Portfolio total value : {Number(this.state.totalValue).toFixed(2)} {this.state.currency}</p>\n                    <div>\n                        <button onClick={()=> this.showStockForm()} className=\"btn btn-secondary btn-sm mr-4\">Add Stock</button>\n                        <button className=\"btn btn-secondary btn-sm mr-4\">Graph Analysis</button>\n                        <button onClick={() => this.props.remove(this.props.index)} className=\"btn btn-secondary btn-sm mr-4\">Remove portfolio</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    showInDollar = () => {\n        // we do not perform the conversion if the currency is already in $\n        document.getElementById (\"dollar\"+this.props.index).disabled = true;\n        document.getElementById (\"euros\"+this.props.index).disabled = false;\n        if(this.state.currency === \"$\"){\n            return;\n        }\n        fetch('https://api.exchangeratesapi.io/latest?symbols=USD')\n            .then(res => {\n                return res.json();\n            }).then(data => {\n            let exchangeRate = data[\"rates\"][\"USD\"];\n            let stocks = this.state.listStock;\n            let totVal = 0;\n\n            stocks.forEach(stock => {\n                stock[\"unitPrice\"] *= exchangeRate;\n                stock[\"totalPrice\"] *= exchangeRate;\n                totVal += stock[\"totalPrice\"];\n            });\n\n            this.setState({currency: \"$\", totalValue:totVal},\n                () => {\n                    this.savePortfolioState();\n                });\n\n        })\n            .catch(err => alert(\"The symbol you want to add does not exist in the database\"));\n    };\n\n    showInEuro = () => {\n        document.getElementById(\"dollar\"+this.props.index).disabled = false;\n        document.getElementById(\"euros\"+this.props.index).disabled = true;\n        if(this.state.currency === \"€\"){\n            return;\n        }\n        fetch('https://api.exchangeratesapi.io/latest?symbols=USD')\n            .then(res => {\n                return res.json();\n            }).then(data => {\n            let exchangeRate = data[\"rates\"][\"USD\"];\n            let stocks = this.state.listStock;\n            let totVal = 0;\n\n            stocks.forEach(stock => {\n                stock[\"unitPrice\"] /= exchangeRate;\n                stock[\"totalPrice\"] /= exchangeRate;\n                totVal += stock[\"totalPrice\"];\n            });\n\n            this.setState({currency: \"€\", totalValue:totVal},\n                () => {\n                    this.savePortfolioState();\n                });\n        })\n            .catch(err => alert(\"The symbol you want to add does not exist in the database\"));\n    };\n\n    render() {\n        // allow us to know if we have to render the form to add a stock or the portfolios\n        if (this.state.isAddingStock) {\n            return this.renderStockForm()\n        } else {\n            return this.renderPortfolio()\n        }\n    }\n}\n\nclass Stock extends Component {\n    render(){\n        return(\n            <tr>\n                <td>{this.props.symbol}</td>\n                <td>{Number(this.props.unitPrice).toFixed(2)}</td>\n                <td>{this.props.shares}</td>\n                <td>{Number(this.props.totalPrice).toFixed(2)}</td>\n                <td><button className=\"btn btn-outline-danger btn-sm\" onClick={() => this.props.deleteStock(this.props.index)}>Delete Stock</button></td>\n            </tr>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}